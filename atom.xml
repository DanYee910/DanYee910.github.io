<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daniel Yee's Blog]]></title>
  <link href="http://danyee910.github.io/atom.xml" rel="self"/>
  <link href="http://danyee910.github.io/"/>
  <updated>2015-02-24T16:52:59-08:00</updated>
  <id>http://danyee910.github.io/</id>
  <author>
    <name><![CDATA[Daniel Yee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Registering and Matching Key Press Sequences]]></title>
    <link href="http://danyee910.github.io/blog/2015/02/24/registeringkeys/"/>
    <updated>2015-02-24T16:23:00-08:00</updated>
    <id>http://danyee910.github.io/blog/2015/02/24/registeringkeys</id>
    <content type="html"><![CDATA[<p>A friend told me today of a problem that he was given.  In the same vein as Street Fighter, write a couple functions that will register and match key sequences to inputs.</p>

<p>In Street Fighter:
Down, Forward-Down, Forward, Punch = &ldquo;Hadoken&rdquo;</p>

<p>So if you press &ldquo;Up, Down, Up, Down, Kick, Down, Forward-Down, Forward, Punch&rdquo;, you should end with a Hadoken.  Sounds pretty straightforward.</p>

<p>In the same way, write 2 functions to:
1. Register a key sequence to match inputs to
2. On each key press, check for matching sequences</p>

<p>I chose to approach this problem with Ruby.</p>

<p>First off I tried to come up with several variables I would need.
1. A &ldquo;database&rdquo;/library of sequences to match keys against.  The register function will add to this data structure.  I decided a Hash made the most sense here.
2. An array to store key presses.  If the longest sequence is 8 characters, the most characters you would need to match against it is 8, so this &ldquo;history&rdquo; of keypresses is only as long as the greatest sequence.
3. The length of the greatest sequence, because of #2 above.</p>

<p>The result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Keys</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@DB</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@keystorage</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@longest</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to look at my methods.  Method register will take a key sequence and a name.  It needs to do 2 things, first obviously add this sequence to the library, and second if necessary I need to update the @longest variable.  This part was pretty simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">keys_pressed</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">keys_pressed</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">].</span><span class="n">length</span> <span class="o">&gt;</span> <span class="vi">@longest</span>
</span><span class='line'>      <span class="vi">@longest</span> <span class="o">=</span> <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Onto the key press.  Lots more stuff here.  First, the program should only keep track of as many keys as necessary, if the longest sequence is only 5 characters, it&rsquo;s meaningless to store more than the last 5 characters pressed.  So to start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">on_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@keystorage</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="vi">@longest</span>
</span><span class='line'>      <span class="vi">@keystorage</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@keystorage</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we know the keys we are using to find matches, and we have a library of sequences to match against.  Now it&rsquo;s just a matter of finding any matches and returning them.  If the key history holds 5 character, and I&rsquo;m matching a 3 character sequence, just check that sequence against the last 3 characters.  If it matches, push the name of that sequence to an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">matches</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vi">@DB</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="vi">@keystorage</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="n">matches</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When all is done, return any contents of that array.  Final code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Keys</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@DB</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@keystorage</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@longest</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">keys_pressed</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">keys_pressed</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">].</span><span class="n">length</span> <span class="o">&gt;</span> <span class="vi">@longest</span>
</span><span class='line'>      <span class="vi">@longest</span> <span class="o">=</span> <span class="vi">@DB</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">on_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@keystorage</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="vi">@longest</span>
</span><span class='line'>      <span class="vi">@keystorage</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@keystorage</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@DB</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="vi">@keystorage</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>        <span class="n">matches</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;here are your matches:&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">matches</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;no matches found&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span> <span class="o">=</span> <span class="no">Keys</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;firstmatch&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;testing&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;testingtwo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;z&quot;</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;fail&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;q&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="s2">&quot;t&quot;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;long&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#no matches</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">on_key</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#expect &#39;firstmatch&#39;</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">on_key</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#expect &#39;testing&#39; and &#39;testingtwo&#39;</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">on_key</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Back at Items in Diablo 2]]></title>
    <link href="http://danyee910.github.io/blog/2015/01/16/itemsindiablo2/"/>
    <updated>2015-01-16T09:22:00-08:00</updated>
    <id>http://danyee910.github.io/blog/2015/01/16/itemsindiablo2</id>
    <content type="html"><![CDATA[<p>Diablo 2 was my introduction into Action RPGs.  I played Diablo 2 and several mods of it off and on for probably over 10 years, longer than any other game by a mile.  Looking back I think one of the prime factors that kept me playing for so long was the item/loot system.  It is my belief that one can truly write a book on the subject, it is a complex subject and opinions abound.  I want to take a glancing look at what made the loot as addictive as it was <em>for me personally</em>, because in my opinion there are still many lessons to be learned.</p>

<h2>The good:</h2>

<ul>
<li>Base item variety</li>
</ul>


<p>In just the base item classes there is already a large variety before any rolled attributes even come into play.  There isn’t simply a “bow” but an entire collection of bows, of varying level, damage range, attack speed, and requirements.  This alone already gives you a choice between hitting fast and light, or hitting slow and hard, and everything in between.  Bows with low Strength requirement might also be desirable, because you can conserve more stat points for Dexterity which is more useful with bows.</p>

<p>Similarly, armor slots also varied in stats.  Leather type armors provided less defense but also lower strength requirements.  The highest end metal plated armors provided huge defense but could also give you a move speed penalty.  Spellcasters can get away with light leather armor but a Barbarian would seek a solid piece of defensive armor.  This balancing act and tug of war between base item stats is just the beginning.  I believe it shows immediately the philosophy behind the item system of providing choices for different play styles.  Arguably a not too glamorous part of the game but attention to detail here was very impressive.</p>

<ul>
<li>Offensive attribute variety</li>
</ul>


<p>One thing I miss from D2 was the sheer amount of useful item attributes, both offensive, defensive, and supportive.  Offensively there was a slew of usual damage and attack speed mods, but you can augment it in so many ways with other attributes.  Aura on equipment, skill passives, chance to proc curses, crushing blow, deadly strike, -% target defense, the list goes on and on.  You would be hard pressed to fit all of it, but you were free to choose which ones you wanted to concentrate on.</p>

<ul>
<li>Damage mitigation strategies</li>
</ul>


<p>Defensively, I have yet to play a game that offered so many layers of defense.  Defense, hit points, dodge, block, damage reduction %, and flat damage reduction.  It was a challenge becoming the tankiest hero while keeping solid damage output, but it was certainly possible.  The damage mitigation potential was excellent and a tank truly felt like a tank.  A problem many games have is with increased difficulty being equated to “damage spikes”.  It’s not interesting to get wiped out in one shot from a boss, and damage mitigation is an area a lot of other games feel very weak and underdeveloped in.</p>

<ul>
<li>The high end: Set vs. Unique vs. Runeword</li>
</ul>


<p>Min maxing aside, I feel the game eventually got to a point that allowed a lot of flexibility in how to gear oneself.  While as a general rule you could say one item type was better than the other, there was significant overlap in power level between sets, uniques, and runewords that made choosing between them less clear cut.  There is usually a consensus over which setup is &ldquo;best&rdquo;, but I think D2 also allowed for many slightly less optimal but still viable choices.  It was very possible for non-cookie cutter builds to get their fair share of the action.</p>

<ul>
<li>Reasonably tight ranges on the random number generator</li>
</ul>


<p>Mostly in regard to unique items and runewords, they were difficult enough to obtain and still had random attribute rolls.  The stat ranges however were reasonably tuned most of the time.  Even with bad rolls the item itself was still plenty usable.  Of course the quest for the perfect item never ends, but being content with equipment found on the way made it more palatable.  It is a different story if the item dropped once in a blue moon, and you rolled +1 all skills when the item could potentially have +3.  “RNG is RNG” is something I read on forums from time to time, I think D2 hit a fair balance between randomness and flat out insulting the player.</p>

<ul>
<li>Multiple Set/Unique drops on big bosses</li>
</ul>


<p>Loot explosions that cut out a lot of the crap and got right to business.  You could expect to see maybe 6 items, and theres a pretty solid chance to find some green and gold in there, maybe even multiples.  The question is are the green and gold items going to be the good ones.  I think that is much more exciting that seeing a pile of blue and yellow vendor trash time after time with a thin chance of a higher grade, something that feels almost endemic in some games.</p>

<ul>
<li>Items that were more than stat sticks</li>
</ul>


<p>I have yet to find a game that does this as well as D2.  Quite a number of items stood on their own or complemented character skills that they could form the centerpiece of new builds.  My favorite probably being the interaction of Freezing Arrow with pierce and cold damage mods from items.  It became a question less of “what is the biggest amount of some stat I can get” and more of a “does this combination of mods work really well with my build”.  It made for much more interesting decision making.</p>

<ul>
<li>Magic find item mods clearly helped</li>
</ul>


<p>Sometimes I really have to wonder with games if item find boosting properties even work at all.  With drop rates poor enough, turning 0.0001% to 0.0004% drop rate was indistinguishable, so why bother.  It was abundantly clear with D2 that Magic Find was real and working.  It was a real decision to balance Magic Find and killing speed on characters.  Many players geared characters with massive amounts of Magic Find to the detriment of their survivability.  Maybe not the best choice, but certainly a valid choice.  Most games I completely ignore such mods.</p>

<h2>The not so good:</h2>

<p>Now all that said, D2 had it&rsquo;s faults as well.  Some games have since implemented their own fixes for these issues.  Parts I found less than desirable:</p>

<ul>
<li>Non-scalable item levels.</li>
</ul>


<p>A biggie.  Uniques were designed at a specific level, and only that level.  If a unique has great mods but it’s a level 29 unique, you’re going to have think real hard about replacing it at level 80 no matter how much you like the mods.  For rares and magics, the attributes available grew stronger as higher level items dropped.  However sets, runewords, and uniques did not scale according to level.  In essence, that gigantic pool of so many uniques is realistically smaller because by the end of the game so many of them are simply obsolete.  Marvel Heroes instituted item level scaling on all Uniques, this decision makes it possible for all Uniques in the game to drop and be competitive at any level.</p>

<ul>
<li>Durability and consumed arrows</li>
</ul>


<p>These item properties have thankfully disappeared in most games I have played since.  They add a little thematic flavor to the game, at the expense of smooth gameplay.  I think the choice to ditch these in favor of better gameplay is the correct one.  They took a lot of “action” out of ARPG.</p>

<ul>
<li>Backpack Tetris</li>
</ul>


<p>Great swords take a 2x4 inventory space while a ring took up 1x1, oh the pain…  Many of the more recent ARPGs make items in stash of a uniform size.  A ring takes up the same amount of space as a Halberd.  It greatly simplifies inventory management which I think is excellent.  D2’s rapid pace of item drops led to a lot of shuffling of items around to try and line up empty squares to fit items in.</p>

<ul>
<li>Lack of stackable consumables.</li>
</ul>


<p>One of the biggest advances in ARPG items…  D2 had no stackable potions, item stacks have made there way into pretty much all of the recent ARPGs thank god.  One of the first things I relished when playing D2 mods was the increased stack on keys and scrolls.  Definitely a quality of life shortcoming that has been recognized and rectified since.</p>

<ul>
<li>Unidentified everything</li>
</ul>


<p>Magics and rares both came unidentified every single time.  Item identification is another thematically fitting property, but one which again interrupts the flow of gameplay.</p>

<ul>
<li>Ethereal items</li>
</ul>


<p>Items that will eventually break permanently, with a few possible workarounds…  Not my favorite mechanic.  You have no control over what ends up as ethereal either.</p>

<h2>Conclusions.</h2>

<p>At the time I was simply blown away at the depth of how D2 handled it’s items.  Some of the mechanics are clearly dated, but a lot of it still holds up even today.</p>

<p>There is a lot of good to take away from the game.  A lot of the points above came to mind because they are things I still see lacking in &ldquo;modern&rdquo; games.  Even now, a lot of random item systems feel pretty sparse when compared with what D2 used 10 years ago.  On one hand I am glad to see many of the least desirable mechanics left behind, but at the same time I haven’t seen an item system that can stand alongside D2&rsquo;s 15 year old system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Routes]]></title>
    <link href="http://danyee910.github.io/blog/2015/01/16/restfulroutes/"/>
    <updated>2015-01-16T04:41:00-08:00</updated>
    <id>http://danyee910.github.io/blog/2015/01/16/restfulroutes</id>
    <content type="html"><![CDATA[<p>The concept of RESTful routes has always felt a bit muddled to me.  At times it sounded simple and I tell myself &ldquo;I got it&rdquo;, but think a little harder and I get lost again.</p>

<p>Representational State Transfer(REST), the words themselves really don&rsquo;t mean much to me and I&rsquo;m not sure what I&rsquo;m supposed to infer from them either.  The best explanations I can find generally run along these lines:</p>

<p>REST is a suggested style or guideline to use certain HTTP verbs, URLs, and controller actions to design a web app.  For webapps that conform to the RESTful way of design, it is easier to predict and see what it is doing and which urls it is using.  It appears particularly suited for CRUD(create, read, update, destroy) apps.</p>

<p>An example of RESTful routes:</p>

<table>
<thead>
<tr>
<th> HTTP verb </th>
<th> URL              </th>
<th> controller#action </th>
</tr>
</thead>
<tbody>
<tr>
<td> GET    </td>
<td> /blogposts          </td>
<td> blogposts#index   </td>
</tr>
<tr>
<td> POST   </td>
<td> /blogposts          </td>
<td> blogposts#create  </td>
</tr>
<tr>
<td> GET    </td>
<td> /blogposts/new      </td>
<td> blogposts#new     </td>
</tr>
<tr>
<td> GET    </td>
<td> /blogposts/:id/edit </td>
<td> blogposts#edit    </td>
</tr>
<tr>
<td> GET    </td>
<td> /blogposts/:id      </td>
<td> blogposts#show    </td>
</tr>
<tr>
<td> PATCH  </td>
<td> /blogposts/:id      </td>
<td> blogposts#update  </td>
</tr>
<tr>
<td> PUT    </td>
<td> /blogposts/:id      </td>
<td> blogposts#update  </td>
</tr>
<tr>
<td> DELETE </td>
<td> /blogposts/:id      </td>
<td> blogposts#destroy </td>
</tr>
</tbody>
</table>


<p><em>I hate markdown tables&hellip;</em></p>

<p>GET /blogposts will hit the #index action of the blogposts controller, and generally is used to retrieve the list of all blogposts.</p>

<p>POST /blogposts using the same route but with the POST verb it will use the #create action, usually to create a new individual blogpost, which will then have it&rsquo;s own page and id.</p>

<p>GET /blogposts/new is a GET request to the #new method, to get a form for the creation of a new blogpost.</p>

<p>GET /blogposts/:id/edit retrieves an edit page for the specific blogpost.</p>

<p>GET /blogposts/:id retrieves a page to show what the specific blogpost is.</p>

<p>PATCH and PUT blogposts/:id use the #update action, and are used to pass back the inputs from the retrieved edit form, and perform those actions on the server.</p>

<p>DELETE blogposts/:id uses the delete action to delete the record corresponding to :id.</p>

<p>Everything laid out above is useful for CRUD apps, not too surprising.  I think the biggest takeaway is that while you <em>can</em> name your urls, routes, and methods whatever you want, RESTful routing gives you a suggested convention.  If you follow RESTful convention, someone else should be able to see your code and figure it out without having to muck around too much.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pseudo-Random Number Generators]]></title>
    <link href="http://danyee910.github.io/blog/2014/09/24/PRNGs/"/>
    <updated>2014-09-24T00:00:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/09/24/PRNGs</id>
    <content type="html"><![CDATA[<p>This topic was introduced to me by a friend many months ago, and I find it fascinating in it&rsquo;s importance, simplicity, and also difficulty.  Random numbers, surely something so simple  doesn&rsquo;t warrant your time to read about it.  Here is what happens when fake randomness is figured out:</p>

<p><img src="http://danyee910.github.io/images/LARSON16.jpg" alt="Larson" /></p>

<p>Yea he has so much money the dollar sign doesn&rsquo;t even display anymore.</p>

<p>Given the capabilities of computers to solve both small and large problems in all parts of life, at some point there will be a need to simulate randomness.  The problem is computers are very good at following the directions you give them, but by design they are entirely predictable.  Asking a computer to do something truly random, is something they are not designed to do.  True randomness in nature can be found in radioactive decay, radio static, or atmospheric noise.  How do you get a predictable computer to act randomly? Programmers can &ldquo;simulate&rdquo; randomness with complex algorithms to generate numbers that are &ldquo;close&rdquo; to random.</p>

<p>Pseudo-Random Number Generators(PRNGs):  PRNGs are typically built around mathematical algorithms that produce seemingly random sequences of numbers.  PRNGs are very efficient, they can generate large amounts of nearly random numbers in a short length of time.  A &ldquo;seed&rdquo; value is the initial state that is run through the PRNG algorithm to give a &ldquo;random&rdquo; result.  This is important because by their nature, PRNGs are &ldquo;deterministic&rdquo;, if you know the seed that started a sequence you can reproduce it later in time.  In some cases that can be a desirable attribute, for instance you can run the same computer simulation several times if needed.  Another property of PRNGs is &ldquo;periodicity&rdquo;, given enough time a given sequence will reappear which obviously wouldn&rsquo;t be very random.  Well crafted PRNGs have extremely long periods such that this is not a problem.</p>

<p>So to recap, PRNGs are &ldquo;almost random&rdquo;, and are:</p>

<ul>
<li>Efficient - They can generate large amounts of numbers quickly.</li>
<li>Deterministic - Given a known seed they are reproducible.</li>
<li>Periodic - It will eventually repeat itself.</li>
</ul>


<p>While not perfect for every use, PRNGs are a powerful tool that have many applications.  PRNGs are widely used in simulations, models, games, and cryptography.  Cryptography requires PRNGs of a much higher standard, called cryptographically secure pseudorandom number generators.  CSPRNGs must not only possess a high degree of near randomness, but the algorithm must be resilient to attack even if the attacker has partial knowledge of the initial state/seed.  That brings up an important point, a PRNG is only as good as it&rsquo;s algorithm, and poorly done PRNGs can lead to disaster.</p>

<p>When PRNGs go wrong, the consequences can be severe.  One of the most infamous examples is the Planet Poker website and it&rsquo;s Texas Holdem game.  With real money at stake, PP&rsquo;s business hinged on being able to produce true randomness like in a casino setting.  The snowball that got everything rolling was PP publishing it&rsquo;s shuffling algorithm to reassure players of it&rsquo;s fairness.  Upon seeing this code, a team of security researchers were convinced it was flawed and set about cracking the RNG behind it.  A real deck of 52 cards has a 52! number of possible shuffles, a staggeringly huge number of possibilities.  PP&rsquo;s algorithm used the clock as a seed, and the researchers realized the algorithm results in only around 200,000 shuffles, while large it is nowhere near as large as 52 real cards.  They created a program that takes the player&rsquo;s 2 known cards, plus the 3 revealed cards from the flop.  Knowing only those 5 cards, the program searched through the 200,000 possible shuffles to find the initial state.  Once found, the program could determine every other player&rsquo;s hand, as well as the upcoming turn and river cards.  A PRNG doesn&rsquo;t get anymore cracked than that.  The researchers went public with their findings, and Planet Poker was publicly humilated.
<img src="http://danyee910.github.io/images/poker3.jpg" alt="Poker" /></p>

<p>I hope this cursory look at randomness and PRNGs is useful to you.  Whether you know it or not, PRNGs are everywhere.  Randomness is a simple concept, yet creating randomness is incredibly complex with massive amounts of money and research spent trying to do it right.  The consequences of poor randomness ensure that research into PRNGs will always continue.  Every time I play a game online and players blow off some unlikely occurrence with &ldquo;eh&hellip;RNG is RNG&rdquo;, I just think about Planet Poker and how that statement could very well be wrong.  Can you imagine playing against a player who knows all the cards that are out and what&rsquo;s coming?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injection]]></title>
    <link href="http://danyee910.github.io/blog/2014/09/18/SQLinjection/"/>
    <updated>2014-09-18T00:00:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/09/18/SQLinjection</id>
    <content type="html"><![CDATA[<p>What is SQL injection? The definition is remarkably simple.  For websites where users are allowed to enter input into entry fields (search forms, username fields, feedback forms&hellip;), malicious SQL statements can be entered instead and actually change the behavior of the query.  I have to admit I was a bit shocked upon reading just how simple SQL injections are in concept.  All it really takes to execute an SQL injection attack, is knowledge of writing SQL queries, guessing sensitive table names, and a website that has improper controls on input.  No special tools or programs are involved.  It is apparently one of the most prevalent methods of attacking websites, and wikipedia lists dozens of very public cases in recent years.</p>

<p>Why is SQL injection bad?  A common example is using SQL injection in a username field to trick the query into returning &ldquo;true&rdquo; for everything, potentially giving back the entire table and not just the record for one username.  Of course if that information is passwords, SSNs, or credit card numbers, you get the idea&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SQL Query:
</span><span class='line'>SELECT * FROM users WHERE name ='" + userName + "';
</span><span class='line'>
</span><span class='line'>expected userName input:
</span><span class='line'>John
</span><span class='line'>
</span><span class='line'>Actual input:
</span><span class='line'>' or '1'='1
</span><span class='line'>
</span><span class='line'>Final Query:
</span><span class='line'>SELECT * FROM users WHERE name = '' OR '1'='1';</span></code></pre></td></tr></table></div></figure>


<p>In this example, the input is a cleverly crafted input that is actually a SQL statement fragment. The query will always return true since 1 = 1, and it will return the data for all users since every name is essentially true.  SQL injections are not limited by just returning records, it is also possible to inject a DROP TABLE command and delete entire tables.</p>

<p>How can you protect against SQL injection?  You must exercise some control over the input that is given by the user, to prevent &ldquo;code&rdquo; rather than the expected text from going all the way through to execution.</p>

<p>Some methods:</p>

<ul>
<li>Blacklisting characters.</li>
</ul>


<p>By having a database of characters that have special function in SQL, you can escape certain characters to prevent acceptance of actual code from fields.  This can be a messy and error prone method however, and simply blacklisting characters entirely is not an elegant solution.</p>

<ul>
<li>Using parameterized statements.</li>
</ul>


<p>A parameterized statement is like a premade template, with default values that are substituted when users input their own text.  In this way the input is not fed directly to the SQL statement and can be checked first.  The placeholder text can only we overwritten with the proper input type, and fragments of SQL code will either be invalid altogether or treated as just funny looking text.</p>

<ul>
<li>Input validation and pattern matching.</li>
</ul>


<p>Input from the user is matched against a predefined set of rules governing length, syntax, types of characters, etc&hellip;so providing a weird looking partial SQL statement should fail to pass.</p>

<ul>
<li>Limiting permissions.</li>
</ul>


<p>For users that have access to the database, make sure they have access to only the relevent areas that they need.</p>

<p>SQL injection is a major topic that I am still grappling to understand.  The basic concept is disturbingly simple, and it&rsquo;s not a surprise how often these happen as a result.  It seems the key is really making sure that website users have their inputs &ldquo;sanitized&rdquo; before any of it is used in a query.  The countermeasures are public and well known, I think it is a matter of the proper people learning to use the tools to prevent such attacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variables and Scope in Ruby]]></title>
    <link href="http://danyee910.github.io/blog/2014/09/13/rubyvariablesandscope/"/>
    <updated>2014-09-13T00:00:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/09/13/rubyvariablesandscope</id>
    <content type="html"><![CDATA[<p>Variable scope refers to where in a program a particular variable is accessible.  Ruby has several different kinds of characters with different scope, each warrants considerations in how and when to use them.  Ruby has local, global, instance, and class variables.</p>

<p>Local variable:</p>

<p>These variables are &ldquo;local&rdquo; to the contruct in which they are defined.  They begin with a lowercase letter or underscore.  Top level/outside of all definitions is one local scope, classes and modules are a different scope, and methods are yet another scope.  Nesting in layers creates yet more local scopes.  Variables using the same name will not conflict with each other as long as their local scopes are distinct and separate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>    <span class="n">local_a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>        <span class="n">local_a</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="nb">p</span> <span class="s2">&quot;from class local scope: </span><span class="si">#{</span><span class="n">local_a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;from method inside the class: </span><span class="si">#{</span><span class="n">local_a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">newC</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">newC</span><span class="o">.</span><span class="n">some_method</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &quot;from method inside the class: 1&quot;</span>
</span><span class='line'><span class="c1"># &quot;from class local scope: 2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Global variable:</p>

<p>These variables are accessible anywhere in the program once defined, and are prefixed with a $.  While sounding convenient, it is better practice to limit usage of global variables.  Since Ruby is object oriented, it is built around the concept of objects passing messages to each other.  Global variables conflict with general practices of trying to separate code into objects, and the wide accessibility makes it tough to compartmentalize code.  Simply put, too many objects know of it&rsquo;s existence and it has too much reach in your program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$gVar</span> <span class="o">=</span> <span class="s2">&quot;defined outside class&quot;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">G</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_g</span>
</span><span class='line'>        <span class="nb">p</span> <span class="vg">$gVar</span>
</span><span class='line'>        <span class="vg">$gVar</span> <span class="o">=</span> <span class="s2">&quot;yet accessible everywhere!&quot;</span>
</span><span class='line'>        <span class="nb">p</span> <span class="vg">$gVar</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">newG</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">newG</span><span class="o">.</span><span class="n">print_g</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &quot;defined outside class&quot;</span>
</span><span class='line'><span class="c1"># &quot;yet accessible everywhere!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class variable:</p>

<p>A variable that is shared by all instances of a class.  Defined with a @@ prefix, it is visible to all instances of the class but not to anything outside.  If this variable changes it changes for all instances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cars</span>
</span><span class='line'>    <span class="vc">@@color</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">change_color</span>
</span><span class='line'>        <span class="vc">@@color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_color</span>
</span><span class='line'>        <span class="nb">p</span> <span class="vc">@@color</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ford</span> <span class="o">=</span> <span class="no">Cars</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ford</span><span class="o">.</span><span class="n">print_color</span>
</span><span class='line'><span class="c1"># &quot;red&quot;</span>
</span><span class='line'><span class="n">ford</span><span class="o">.</span><span class="n">change_color</span>
</span><span class='line'><span class="n">ford</span><span class="o">.</span><span class="n">print_color</span>
</span><span class='line'><span class="c1"># &quot;blue&quot;</span>
</span><span class='line'><span class="n">honda</span> <span class="o">=</span> <span class="no">Cars</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">honda</span><span class="o">.</span><span class="n">print_color</span>
</span><span class='line'><span class="c1"># &quot;blue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instance variables:</p>

<p>These variables are local and specific to a class instance object.  Each instance object will have it&rsquo;s own instance variable tied to it&rsquo;s existence.  Prefixed with a @, if an instance variable is changed it is changed for only that one instance and the other objects are unaffected, even if they have instance variables with the same name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Planes</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:color</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">boeing747</span> <span class="o">=</span> <span class="no">Planes</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;pink&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">concorde</span> <span class="o">=</span> <span class="no">Planes</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;blue&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">boeing747</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="s2">&quot;red&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">boeing747</span><span class="o">.</span><span class="n">color</span>
</span><span class='line'><span class="c1"># &quot;red&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">concorde</span><span class="o">.</span><span class="n">color</span>
</span><span class='line'><span class="c1"># &quot;blue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why do we care about scope?  For purposes of organization, clean code, and debugging, variable scope is important.  You generally want to make variables with the appropriate scope, so the objects and methods that use those variables can access them while they are still unknown to all else.  Since nearly everything in Ruby is an object, you want to limit each object&rsquo;s knowledge of variables to only the ones it will need.  Using variables with unnecessarily wide scope can lead to bugs that are harder to track and more difficult to fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Classes With Game Items]]></title>
    <link href="http://danyee910.github.io/blog/2014/09/04/rubyclasses/"/>
    <updated>2014-09-04T00:00:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/09/04/rubyclasses</id>
    <content type="html"><![CDATA[<p>Classes in Ruby give the programmer ways to create many separate objects that all share similar behavior.  It is functionality that enables you to better organize your code.  While the behavior may be similar between objects, they still have their own individual identity and differences. Upon first learning of Classes, one of my first reactions was a feeling I&rsquo;ve seen this before somewhere.</p>

<p>If there is one thing I&rsquo;ve done quite a lot over the years, it&rsquo;s play action rpgs.  Diablo, Titan Quest, Borderlands, Torchlight, Marvel Heroes&hellip;  A big draw of these games is a massive loot dropping system.  To me that sounds just like Classes, large numbers of very similar, but individually distinct objects!  I&rsquo;d like to do a thought experiment and see how Classes could be used to organize something as expansive as an item system.</p>

<p>I feel Classes are an appropriate strategy to use for designing an item system.  For a fantasy setting as an example: health potions, armor, weapons, and consumable items should all have a selling price, and all have a name, etc&hellip;  An interesting property of Classes is single inheritance.  Each Class can inherit the properties and methods of a parent class.  Following that line of thought, a parent Item Class will have a few basic properties applicable to all Items, and then you can further subdivide more specific item Classes as children.  Consider the following (disclaimer, I&rsquo;m not sure I&rsquo;m properly using super keyword):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Items</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:buy</span><span class="p">,</span> <span class="ss">:sell</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@buy</span> <span class="o">=</span> <span class="n">buy</span>
</span><span class='line'>    <span class="vi">@sell</span> <span class="o">=</span> <span class="n">sell</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Equipment</span> <span class="o">&lt;</span> <span class="no">Items</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:durability</span><span class="p">,</span> <span class="ss">:rarity</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span><span class="p">,</span> <span class="n">durability</span><span class="p">,</span> <span class="n">rarity</span><span class="p">)</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@durability</span> <span class="o">=</span> <span class="n">durability</span>
</span><span class='line'>      <span class="vi">@rarity</span> <span class="o">=</span> <span class="n">rarity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">roll_rarity</span>
</span><span class='line'>      <span class="c1">#code to randomly determine the rarity,</span>
</span><span class='line'>        <span class="n">rarer</span> <span class="n">items</span> <span class="o">=</span> <span class="n">more</span> <span class="n">powerful</span><span class="p">,</span> <span class="n">more</span> <span class="n">affixes</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Weapons</span> <span class="o">&lt;</span> <span class="no">Equipment</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:attack</span><span class="p">,</span> <span class="ss">:range</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span><span class="p">,</span> <span class="n">durability</span><span class="p">,</span>
</span><span class='line'>                <span class="n">rarity</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">range</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">buy</span><span class="p">,</span> <span class="n">sell</span><span class="p">,</span> <span class="n">durability</span><span class="p">,</span> <span class="n">rarity</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attack</span> <span class="o">=</span> <span class="n">attack</span>
</span><span class='line'>    <span class="vi">@range</span> <span class="o">=</span> <span class="n">range</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">roll_weap_affixes</span>
</span><span class='line'>    <span class="c1">#code to randomly choose affixes for weapons</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">short_sword</span> <span class="o">=</span> <span class="no">Weapons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;short sword&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>                          <span class="mi">20</span><span class="p">,</span> <span class="s2">&quot;common&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'> <span class="c1">#a new weapon object called short_sword is created, with this following attributes:</span>
</span><span class='line'><span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;short_sword&quot;</span>
</span><span class='line'><span class="vi">@buy</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="vi">@sell</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="vi">@durability</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="vi">@rarity</span> <span class="o">=</span> <span class="s2">&quot;common&quot;</span>
</span><span class='line'><span class="vi">@attack</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@range</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">short_sword</span><span class="o">.</span><span class="n">roll_rarity</span>
</span><span class='line'><span class="n">short_sword</span><span class="o">.</span><span class="n">roll_weap_affixes</span>
</span></code></pre></td></tr></table></div></figure>


<p>For an example, the &ldquo;Items&rdquo; Class is a parent/superclass of &ldquo;Equipment&rdquo; which is the superclass of &ldquo;Weapons&rdquo;. The Class Weapons will inherit properties from both Items and Equipment, while also containing it&rsquo;s own.  You can also give each Class it&rsquo;s own methods, which are inherited downwards as well.  A .Weapon object will have it&rsquo;s own roll_weap_affixes method, but it will also know the roll_rarity method from it&rsquo;s superclass, and so on.  The end result is a short_sword item that has attributes from all 3 Classes, and can have methods called on it from any of the 3 classes as well.  This is a pretty crude example, but I think this is a reasonable applicable for Classes and it does illustrate how Classes can be scaled up further to encompass very large collections of data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Enumerable#cycle Method]]></title>
    <link href="http://danyee910.github.io/blog/2014/08/30/rubycycle/"/>
    <updated>2014-08-30T00:00:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/08/30/rubycycle</id>
    <content type="html"><![CDATA[<p>Ruby&rsquo;s collection objects include and use the Enumerable Module.  This module provides the class with various behaviors, as long as that class has a method .each defined for it.  This allows the collection to feed it&rsquo;s elements into a following block.  Among many Enumerable methods I know very little about, is cycle. I would like to look more closely at this method and examine potential uses.</p>

<p>At first reading, Enumberable#cycle seems conceptually very simple and straightforward.  It will pass all elements of the object to the following block in a loop, to infinity unless told otherwise.  If you provide an integer argument to cycle, it will repeat the object that many times.  Using cycle, you can iterate over the entire object as many times as you wish.  If cycle does not get passed a block, it will return an Enumerator object.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">b</span>
</span><span class='line'><span class="c1">#=&gt; [1,2,3,1,2,3,1,2,3]</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">cycle</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">c</span>
</span><span class='line'><span class="c1">#=&gt; [1,2,3,1,2,3,1,2,3...forever]</span>
</span><span class='line'><span class="c1">#=&gt; Enumerator: [1,2,3]:cycle</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#b is simply arr repeated/cycled 3 times.</span>
</span><span class='line'><span class="c1">#c is arr cycled to infinity.</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems simple enough to see what cycle is doing, but how would we use it?  Cycle is useful for repeating events over and over, certain things I do see repeating themselves like this: Time such as months of the year, days of the week, etc&hellip;, or playing cards in, lets say a 6 deck Blackjack shoe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">days</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Mon&quot;</span><span class="p">,</span><span class="s2">&quot;Tues&quot;</span><span class="p">,</span><span class="s2">&quot;Weds&quot;</span><span class="p">,</span><span class="s2">&quot;Thurs&quot;</span><span class="p">,</span><span class="s2">&quot;Fri&quot;</span><span class="p">,</span><span class="s2">&quot;Sat&quot;</span><span class="p">,</span><span class="s2">&quot;Sun&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">calendar</span> <span class="o">=</span> <span class="n">days</span><span class="o">.</span><span class="n">cycle</span>
</span><span class='line'><span class="n">days</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Mon&quot;</span>
</span><span class='line'><span class="n">days</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Tues&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">suits</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;diamonds&quot;</span><span class="p">,</span><span class="s2">&quot;clubs&quot;</span><span class="p">,</span><span class="s2">&quot;hearts&quot;</span><span class="p">,</span><span class="s2">&quot;spades&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="s2">&quot;J&quot;</span><span class="p">,</span><span class="s2">&quot;Q&quot;</span><span class="p">,</span><span class="s2">&quot;K&quot;</span><span class="p">,</span><span class="s2">&quot;A&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">six_decks</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">make_six_decks</span> <span class="o">=</span> <span class="n">suits</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>        <span class="n">six_decks</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">v</span><span class="si">}#{</span><span class="n">s</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">shuffled_six_decks</span> <span class="o">=</span> <span class="n">six</span><span class="o">.</span><span class="n">decks</span><span class="o">.</span><span class="n">shuffle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall I feel like cycle is an abbreviated way of looping elements over and over.  What could have been done with while or for loops and incremental counters is packaged into this one method.  I feel like I&rsquo;m barely scratching the surface of what cycle can do, but at least I won&rsquo;t be completely in the dark the next time I see it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Thoughts]]></title>
    <link href="http://danyee910.github.io/blog/2014/08/22/js/"/>
    <updated>2014-08-22T05:59:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/08/22/js</id>
    <content type="html"><![CDATA[<p>Javascript thoughts</p>

<p>Why is Javascript so popular? Originally created by Netscape, over the years it has become the defacto standard for the web.  In short, to add any kind of extra functionality over the web over the basic static web page, it is going to be very difficult to avoid bumping into Javascript.  It allows interactions with the user, dynamic web page content, and a whole host of expanded functions.  The trump card for Javascript over potential competitors is it&rsquo;s entrenchment, it is universally adopted and standard across so many platforms and browsers.</p>

<p>What are Javascript&rsquo;s strengths? Certainly there must be a reason for it&rsquo;s wide adoption and use.  Javascript has quite a number of things in it&rsquo;s favor.  By interacting with html through the Document Object Model (DOM), Javascript allows websites to do many things on a browser that html alone cannot, such as interact with the user, control the browser, and alter displayed content.  Not only does it make websites more interactive this way, JS scripts are also run clientside as well so they are fast and responsive, and not stressful on the servers.  Javascript can also be used for serverside functionality like creating games and web apps.  As a scripting language, Javascript is relatively close to English and not too difficult for a novice to learn.  As mentioned earlier, it is now so widely adopted and universal, it is an essential part of web programming.</p>

<p>What are the limitations?  Despite being a virtual standard in the industry, there are so many environments to run on that there will be rendering differences across certain platforms.  A large issue with Javascript stems from it&rsquo;s access to the DOM and html.  In addition to provided expanded functionality, it also opens the door for security vulnerabilites.  Malicious scripts could potentially be run on client computers through JS and the DOM.  For the programmer, Javascript is a bit verbose and unforgiving of syntatic errors, such as missing the semicolon end line.  It does demand a certain amount of discipline to program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Classes Versus IDs]]></title>
    <link href="http://danyee910.github.io/blog/2014/08/14/firstblog/"/>
    <updated>2014-08-14T05:59:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/08/14/firstblog</id>
    <content type="html"><![CDATA[<p>CSS classes and IDs are two different ways to categorize and specify parts of your html.  They are functionally very similar, but differ in several important ways that affect how you choose to use them.</p>

<p>For similarities, they both let you identify a tag with a label, so you can specifically target it with css.  By default html and css do nothing to IDs and classes, unless you specify something.</p>

<p>Where they differ is in scope.  IDs are UNIQUE and you can only use them once.  There can only be one element of a given ID at any time.  Classes can be used many times, you can use classes to target many elements all over the page with css.</p>

<p>Here is an example of both in use:</p>

<!-- ``` [language] [title] [url] [link text] -->




<figure class='code'><figcaption><span>Classes vs. Ids Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;awesomegames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>Final Fantasy<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>League of Legends<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>Starcraft<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;othergames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Big Rigs: Over the Road Racing<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Skate 3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Surgeon Simulator<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose we want to differentiate the tables (well I&rsquo;m using the divs as &ldquo;tables&rdquo;), maybe give the table of our favorite games more emphasis, like a bigger font, different background color, etc&hellip;  We can give that table &lsquo;id=&ldquo;awesomegames&rdquo;&rsquo;, and the second table a different ID.  That way the &ldquo;awesomegames&rdquo; table can have it&rsquo;s own format separate from &ldquo;othergames&rdquo;.  Without the IDs, they are both tables and it&rsquo;s not as easy to pick one out without affecting both.</p>

<p>Now within &ldquo;awesomegames&rdquo;, we have 3 elements, but since they&rsquo;re all equally awesome, we want them to share format with each other.  So we can use class, and give them all the same class.  When we apply css to the class, they all inherit the traits.  We give the other games a different class, and they will share those different traits.</p>

<p>Classes and IDs both gives you ways to label code.  The big difference: Use IDs for unique elements, use classes for groups that want to share the same css.</p>
]]></content>
  </entry>
  
</feed>
