<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daniel Yee's Blog]]></title>
  <link href="http://danyee910.github.io/atom.xml" rel="self"/>
  <link href="http://danyee910.github.io/"/>
  <updated>2014-12-21T15:55:17-08:00</updated>
  <id>http://danyee910.github.io/</id>
  <author>
    <name><![CDATA[Daniel Yee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Thoughts]]></title>
    <link href="http://danyee910.github.io/blog/2014/08/22/js/"/>
    <updated>2014-08-22T05:59:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/08/22/js</id>
    <content type="html"><![CDATA[<p>Javascript thoughts</p>

<p>Why is Javascript so popular? Originally created by Netscape, over the years it has become the defacto standard for the web.  In short, to add any kind of extra functionality over the web over the basic static web page, it is going to be very difficult to avoid bumping into Javascript.  It allows interactions with the user, dynamic web page content, and a whole host of expanded functions.  The trump card for Javascript over potential competitors is it&rsquo;s entrenchment, it is universally adopted and standard across so many platforms and browsers.</p>

<p>What are Javascript&rsquo;s strengths? Certainly there must be a reason for it&rsquo;s wide adoption and use.  Javascript has quite a number of things in it&rsquo;s favor.  By interacting with html through the Document Object Model (DOM), Javascript allows websites to do many things on a browser that html alone cannot, such as interact with the user, control the browser, and alter displayed content.  Not only does it make websites more interactive this way, JS scripts are also run clientside as well so they are fast and responsive, and not stressful on the servers.  Javascript can also be used for serverside functionality like creating games and web apps.  As a scripting language, Javascript is relatively close to English and not too difficult for a novice to learn.  As mentioned earlier, it is now so widely adopted and universal, it is an essential part of web programming.</p>

<p>What are the limitations?  Despite being a virtual standard in the industry, there are so many environments to run on that there will be rendering differences across certain platforms.  A large issue with Javascript stems from it&rsquo;s access to the DOM and html.  In addition to provided expanded functionality, it also opens the door for security vulnerabilites.  Malicious scripts could potentially be run on client computers through JS and the DOM.  For the programmer, Javascript is a bit verbose and unforgiving of syntatic errors, such as missing the semicolon end line.  It does demand a certain amount of discipline to program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Classes Versus IDs]]></title>
    <link href="http://danyee910.github.io/blog/2014/08/14/firstblog/"/>
    <updated>2014-08-14T05:59:00-07:00</updated>
    <id>http://danyee910.github.io/blog/2014/08/14/firstblog</id>
    <content type="html"><![CDATA[<p>CSS classes and IDs are two different ways to categorize and specify parts of your html.  They are functionally very similar, but differ in several important ways that affect how you choose to use them.</p>

<p>For similarities, they both let you identify a tag with a label, so you can specifically target it with css.  By default html and css do nothing to IDs and classes, unless you specify something.</p>

<p>Where they differ is in scope.  IDs are UNIQUE and you can only use them once.  There can only be one element of a given ID at any time.  Classes can be used many times, you can use classes to target many elements all over the page with css.</p>

<p>Here is an example of both in use:</p>

<!-- ``` [language] [title] [url] [link text] -->




<figure class='code'><figcaption><span>Classes vs. Ids Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;awesomegames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>Final Fantasy<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>League of Legends<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;favgames&quot;</span><span class="nt">&gt;</span>Starcraft<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;othergames&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Big Rigs: Over the Road Racing<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Skate 3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;notmyfavgames&quot;</span><span class="nt">&gt;</span>Surgeon Simulator<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose we want to differentiate the tables (well I&rsquo;m using the divs as &ldquo;tables&rdquo;), maybe give the table of our favorite games more emphasis, like a bigger font, different background color, etc&hellip;  We can give that table &lsquo;id=&ldquo;awesomegames&rdquo;&rsquo;, and the second table a different ID.  That way the &ldquo;awesomegames&rdquo; table can have it&rsquo;s own format separate from &ldquo;othergames&rdquo;.  Without the IDs, they are both tables and it&rsquo;s not as easy to pick one out without affecting both.</p>

<p>Now within &ldquo;awesomegames&rdquo;, we have 3 elements, but since they&rsquo;re all equally awesome, we want them to share format with each other.  So we can use class, and give them all the same class.  When we apply css to the class, they all inherit the traits.  We give the other games a different class, and they will share those different traits.</p>

<p>Classes and IDs both gives you ways to label code.  The big difference: Use IDs for unique elements, use classes for groups that want to share the same css.</p>
]]></content>
  </entry>
  
</feed>
